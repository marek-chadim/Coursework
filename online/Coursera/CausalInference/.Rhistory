#install packages
install.packages("tableone")
install.packages("Matching")
#load packages
library(tableone)
library(Matching)
#read in data
load(url("http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.sav"))
#view data
View(rhc)
library(tableone)
library(Matching)
library(MatchIt)
data(lalonde)
# Q1
xvars = c('age', 'educ', 'black', 'hispan', 'married', 'nodegree',
're74', 're75')
table1 <- CreateTableOne(vars=xvars, strata='treat', data=lalonde, test=FALSE)
# print the results including the standardized mean differences (SMD)
print("pre matched table 1")
print(table1,smd=TRUE)
# Q2
y_trt <- lalonde$re78[lalonde$treat==1]
y_con <- lalonde$re78[lalonde$treat==0]
print("performing t test ...")
print(mean((y_trt) - mean(y_con)))
# Q3
psmodel <- glm(treat~.-re78,
family = binomial(), data=lalonde) # binomial informs using logistic regression
print(summary(psmodel))
pscore <-psmodel$fitted.values
summary(pscore)
table1 <- CreateTableOne(vars=xvars, strata='treat', data=lalonde, test=FALSE)
View(lalonde)
# Q1
xvars = c('age', 'educ', 'race', 'hispan', 'married', 'nodegree',
're74', 're75')
table1 <- CreateTableOne(vars=xvars, strata='treat', data=lalonde, test=FALSE)
# Q1
xvars = c('age', 'educ', 'race', 'married', 'nodegree',
're74', 're75')
table1 <- CreateTableOne(vars=xvars, strata='treat', data=lalonde, test=FALSE)
# print the results including the standardized mean differences (SMD)
print("pre matched table 1")
print(table1,smd=TRUE)
# Q2
y_trt <- lalonde$re78[lalonde$treat==1]
y_con <- lalonde$re78[lalonde$treat==0]
print("performing t test ...")
print(mean((y_trt) - mean(y_con)))
# Q3
psmodel <- glm(treat~.-re78,
family = binomial(), data=lalonde) # binomial informs using logistic regression
print(summary(psmodel))
pscore <-psmodel$fitted.values
summary(pscore)
# Q4,5
set.seed(931139)
psmatch <- Match(Tr=lalonde$treat, M=1, X=pscore, replace=FALSE)
matched <-lalonde[unlist(psmatch[c("index.treated","index.control")]),]
matchedtab1 <- CreateTableOne(vars=xvars, strata = "treat",
data=matched, test=FALSE)
print(matchedtab1, smd=TRUE)
# Q6
set.seed(931139)
psmatch <- Match(Tr=lalonde$treat, M=1, X=pscore, replace=FALSE, caliper = 0.1)
matched <-lalonde[unlist(psmatch[c("index.treated","index.control")]),]
matchedtab1 <- CreateTableOne(vars=xvars, strata = "treat",
data=matched, test=FALSE)
print(matchedtab1, smd=TRUE)
# Q7
y_trt <- matched$re78[matched$treat==1]
y_con <- matched$re78[matched$treat==0]
diffy <- (y_trt) - (y_con)
print(mean(diffy))
print(t.test(diffy))
#load packages
library(tableone)
library(Matching)
#install packages (if needed)
install.packages("tableone")
install.packages("ipw")
install.packages("sandwich")
install.packages("survey")
#load packages
library(tableone)
library(ipw)
library(sandwich) #for robust variance estimation
library(survey)
expit <- function(x) {1/(1+exp(-x)) }
logit <- function(p) {log(p)-log(1-p)}
#read in data
load(url("http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/rhc.sav"))
#view data
View(rhc)
#read in data
load(url("https://hbiostat.org/data/rhc.sav"))
#read in data
library(haven)
rhc <- read_sav("rhc.sav")
#read in data
library(readr)
rhc <- read_csv("rhc.csv")
View(rhc)
#create a data set with just these variables, for simplicity
ARF<-as.numeric(rhc$cat1=='ARF')
CHF<-as.numeric(rhc$cat1=='CHF')
Cirr<-as.numeric(rhc$cat1=='Cirrhosis')
colcan<-as.numeric(rhc$cat1=='Colon Cancer')
Coma<-as.numeric(rhc$cat1=='Coma')
COPD<-as.numeric(rhc$cat1=='COPD')
lungcan<-as.numeric(rhc$cat1=='Lung Cancer')
MOSF<-as.numeric(rhc$cat1=='MOSF w/Malignancy')
sepsis<-as.numeric(rhc$cat1=='MOSF w/Sepsis')
female<-as.numeric(rhc$sex=='Female')
died<-as.integer(rhc$death=='Yes')
age<-rhc$age
treatment<-as.numeric(rhc$swang1=='RHC')
meanbp1<-rhc$meanbp1
#new dataset
mydata<-cbind(ARF,CHF,Cirr,colcan,Coma,lungcan,MOSF,sepsis,
age,female,meanbp1,treatment,died)
mydata<-data.frame(mydata)
#covariates we will use (shorter list than you would use in practice)
xvars<-c("age","female","meanbp1","ARF","CHF","Cirr","colcan",
"Coma","lungcan","MOSF","sepsis")
#look at a table 1
table1<- CreateTableOne(vars=xvars,strata="treatment", data=mydata, test=FALSE)
## include standardized mean difference (SMD)
print(table1,smd=TRUE)
#propensity score model
psmodel <- glm(treatment ~ age + female + meanbp1+ARF+CHF+Cirr+colcan+
Coma+lungcan+MOSF+sepsis,
family  = binomial(link ="logit"))
## value of propensity score for each subject
ps <-predict(psmodel, type = "response")
#create weights
weight<-ifelse(treatment==1,1/(ps),1/(1-ps))
#apply weights to data
weighteddata<-svydesign(ids = ~ 1, data =mydata, weights = ~ weight)
#weighted table 1
weightedtable <-svyCreateTableOne(vars = xvars, strata = "treatment",
data = weighteddata, test = FALSE)
## Show table with SMD
print(weightedtable, smd = TRUE)
#to get a weighted mean for a single covariate directly:
mean(weight[treatment==1]*age[treatment==1])/(mean(weight[treatment==1]))
#get causal risk difference
glm.obj<-glm(died~treatment,weights=weight,family=quasibinomial(link="identity"))
#summary(glm.obj)
betaiptw<-coef(glm.obj)
SE<-sqrt(diag(vcovHC(glm.obj, type="HC0")))
causalrd<-(betaiptw[2])
lcl<-(betaiptw[2]-1.96*SE[2])
ucl<-(betaiptw[2]+1.96*SE[2])
c(lcl,causalrd,ucl)
#get causal relative risk. Weighted GLM
glm.obj<-glm(died~treatment,weights=weight,family=quasibinomial(link=log))
#summary(glm.obj)
betaiptw<-coef(glm.obj)
#to properly account for weighting, use asymptotic (sandwich) variance
SE<-sqrt(diag(vcovHC(glm.obj, type="HC0")))
#get point estimate and CI for relative risk (need to exponentiate)
causalrr<-exp(betaiptw[2])
lcl<-exp(betaiptw[2]-1.96*SE[2])
ucl<-exp(betaiptw[2]+1.96*SE[2])
c(lcl,causalrr,ucl)
truncweight<-replace(weight,weight>10,10)
#get causal risk difference
glm.obj<-glm(died~treatment,weights=truncweight,family=quasibinomial(link="identity"))
#summary(glm.obj)
betaiptw<-coef(glm.obj)
SE<-sqrt(diag(vcovHC(glm.obj, type="HC0")))
causalrd<-(betaiptw[2])
lcl<-(betaiptw[2]-1.96*SE[2])
ucl<-(betaiptw[2]+1.96*SE[2])
c(lcl,causalrd,ucl)
#first fit propensity score model to get weights
weightmodel<-ipwpoint(exposure= treatment, family = "binomial", link ="logit",
denominator= ~ age + female + meanbp1+ARF+CHF+Cirr+colcan+
Coma+lungcan+MOSF+sepsis, data=mydata)
#numeric summary of weights
summary(weightmodel$ipw.weights)
#plot of weights
ipwplot(weights = weightmodel$ipw.weights, logscale = FALSE,
main = "weights", xlim = c(0, 22))
mydata$wt<-weightmodel$ipw.weights
#fit a marginal structural model (risk difference)
msm <- (svyglm(died ~ treatment, design = svydesign(~ 1, weights = ~wt,
data =mydata)))
coef(msm)
confint(msm)
# fit propensity score model to get weights, but truncated
weightmodel<-ipwpoint(exposure= treatment, family = "binomial", link ="logit",
denominator= ~ age + female + meanbp1+ARF+CHF+Cirr+colcan+
Coma+lungcan+MOSF+sepsis, data=mydata,trunc=.01)
#numeric summary of weights
summary(weightmodel$weights.trun)
#plot of weights
ipwplot(weights = weightmodel$weights.trun, logscale = FALSE,
main = "weights", xlim = c(0, 22))
mydata$wt<-weightmodel$weights.trun
#fit a marginal structural model (risk difference)
msm <- (svyglm(died ~ treatment, design = svydesign(~ 1, weights = ~wt,
data =mydata)))
coef(msm)
#install packages
#install.packages("tableone")
#install.packages("Matching")
#load packages
library(tableone)
library(Matching)
#read in data
library(readr)
rhc <- read_csv("rhc.csv")
View(rhc)
#treatment variables is swang
#create a data set with just these variables, for simplicity
ARF<-as.numeric(rhc$cat1=='ARF')
CHF<-as.numeric(rhc$cat1=='CHF')
Cirr<-as.numeric(rhc$cat1=='Cirrhosis')
colcan<-as.numeric(rhc$cat1=='Colon Cancer')
Coma<-as.numeric(rhc$cat1=='Coma')
COPD<-as.numeric(rhc$cat1=='COPD')
lungcan<-as.numeric(rhc$cat1=='Lung Cancer')
MOSF<-as.numeric(rhc$cat1=='MOSF w/Malignancy')
sepsis<-as.numeric(rhc$cat1=='MOSF w/Sepsis')
female<-as.numeric(rhc$sex=='Female')
died<-as.numeric(rhc$death=='Yes')
age<-rhc$age
treatment<-as.numeric(rhc$swang1=='RHC')
meanbp1<-rhc$meanbp1
#new dataset
mydata<-cbind(ARF,CHF,Cirr,colcan,Coma,lungcan,MOSF,sepsis,
age,female,meanbp1,treatment,died)
mydata<-data.frame(mydata)
#covariates we will use (shorter list than you would use in practice)
xvars<-c("ARF","CHF","Cirr","colcan","Coma","lungcan","MOSF","sepsis",
"age","female","meanbp1")
#look at a table 1
table1<- CreateTableOne(vars=xvars,strata="treatment", data=mydata, test=FALSE)
## include standardized mean difference (SMD)
print(table1,smd=TRUE)
greedymatch<-Match(Tr=treatment,M=1,X=mydata[xvars],replace=FALSE)
matched<-mydata[unlist(greedymatch[c("index.treated","index.control")]), ]
#get table 1 for matched data with standardized differences
matchedtab1<-CreateTableOne(vars=xvars, strata ="treatment",
data=matched, test = FALSE)
print(matchedtab1, smd = TRUE)
#outcome analysis
y_trt<-matched$died[matched$treatment==1]
y_con<-matched$died[matched$treatment==0]
#pairwise difference
diffy<-y_trt-y_con
#paired t-test
t.test(diffy)
#McNemar test
table(y_trt,y_con)
mcnemar.test(matrix(c(973,513,395,303),2,2))
psmodel<-glm(treatment~ARF+CHF+Cirr+colcan+Coma+lungcan+MOSF+
sepsis+age+female+meanbp1+aps,
family=binomial(),data=mydata)
#show coefficients etc
summary(psmodel)
#create propensity score
pscore<-psmodel$fitted.values
logit <- function(p) {log(p)-log(1-p)}
psmatch<-Match(Tr=mydata$treatment,M=1,X=logit(pscore),replace=FALSE,caliper=.2)
matched<-mydata[unlist(psmatch[c("index.treated","index.control")]), ]
xvars<-c("ARF","CHF","Cirr","colcan","Coma","lungcan","MOSF","sepsis",
"age","female","meanbp1")
#get standardized differences
matchedtab1<-CreateTableOne(vars=xvars, strata ="treatment",
data=matched, test = FALSE)
print(matchedtab1, smd = TRUE)
#outcome analysis
y_trt<-matched$died[matched$treatment==1]
y_con<-matched$died[matched$treatment==0]
#pairwise difference
diffy<-y_trt-y_con
#paired t-test
t.test(diffy)
#install package
install.packages("ivpack")
#load package
library(ivpack)
#read dataset
data(card.data)
#summary stats
mean(card.data$nearc4)
#load package
library(ivpack)
#install package
install.packages("ivpack")
